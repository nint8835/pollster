/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as AuthLoginImport } from './routes/auth/login'
import { Route as PollsPollIdIndexImport } from './routes/polls/$pollId/index'
import { Route as PollsPollIdManageImport } from './routes/polls/$pollId/manage'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRoute,
} as any)

const PollsPollIdIndexRoute = PollsPollIdIndexImport.update({
  id: '/polls/$pollId/',
  path: '/polls/$pollId/',
  getParentRoute: () => rootRoute,
} as any)

const PollsPollIdManageRoute = PollsPollIdManageImport.update({
  id: '/polls/$pollId/manage',
  path: '/polls/$pollId/manage',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof rootRoute
    }
    '/polls/$pollId/manage': {
      id: '/polls/$pollId/manage'
      path: '/polls/$pollId/manage'
      fullPath: '/polls/$pollId/manage'
      preLoaderRoute: typeof PollsPollIdManageImport
      parentRoute: typeof rootRoute
    }
    '/polls/$pollId/': {
      id: '/polls/$pollId/'
      path: '/polls/$pollId'
      fullPath: '/polls/$pollId'
      preLoaderRoute: typeof PollsPollIdIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth/login': typeof AuthLoginRoute
  '/polls/$pollId/manage': typeof PollsPollIdManageRoute
  '/polls/$pollId': typeof PollsPollIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth/login': typeof AuthLoginRoute
  '/polls/$pollId/manage': typeof PollsPollIdManageRoute
  '/polls/$pollId': typeof PollsPollIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/auth/login': typeof AuthLoginRoute
  '/polls/$pollId/manage': typeof PollsPollIdManageRoute
  '/polls/$pollId/': typeof PollsPollIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/auth/login' | '/polls/$pollId/manage' | '/polls/$pollId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/auth/login' | '/polls/$pollId/manage' | '/polls/$pollId'
  id:
    | '__root__'
    | '/'
    | '/auth/login'
    | '/polls/$pollId/manage'
    | '/polls/$pollId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthLoginRoute: typeof AuthLoginRoute
  PollsPollIdManageRoute: typeof PollsPollIdManageRoute
  PollsPollIdIndexRoute: typeof PollsPollIdIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthLoginRoute: AuthLoginRoute,
  PollsPollIdManageRoute: PollsPollIdManageRoute,
  PollsPollIdIndexRoute: PollsPollIdIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/auth/login",
        "/polls/$pollId/manage",
        "/polls/$pollId/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/auth/login": {
      "filePath": "auth/login.tsx"
    },
    "/polls/$pollId/manage": {
      "filePath": "polls/$pollId/manage.tsx"
    },
    "/polls/$pollId/": {
      "filePath": "polls/$pollId/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as AuthLoginImport } from './routes/auth/login'
import { Route as VotesVoteIdIndexImport } from './routes/votes/$voteId/index'
import { Route as VotesVoteIdManageImport } from './routes/votes/$voteId/manage'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRoute,
} as any)

const VotesVoteIdIndexRoute = VotesVoteIdIndexImport.update({
  id: '/votes/$voteId/',
  path: '/votes/$voteId/',
  getParentRoute: () => rootRoute,
} as any)

const VotesVoteIdManageRoute = VotesVoteIdManageImport.update({
  id: '/votes/$voteId/manage',
  path: '/votes/$voteId/manage',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof rootRoute
    }
    '/votes/$voteId/manage': {
      id: '/votes/$voteId/manage'
      path: '/votes/$voteId/manage'
      fullPath: '/votes/$voteId/manage'
      preLoaderRoute: typeof VotesVoteIdManageImport
      parentRoute: typeof rootRoute
    }
    '/votes/$voteId/': {
      id: '/votes/$voteId/'
      path: '/votes/$voteId'
      fullPath: '/votes/$voteId'
      preLoaderRoute: typeof VotesVoteIdIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth/login': typeof AuthLoginRoute
  '/votes/$voteId/manage': typeof VotesVoteIdManageRoute
  '/votes/$voteId': typeof VotesVoteIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth/login': typeof AuthLoginRoute
  '/votes/$voteId/manage': typeof VotesVoteIdManageRoute
  '/votes/$voteId': typeof VotesVoteIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/auth/login': typeof AuthLoginRoute
  '/votes/$voteId/manage': typeof VotesVoteIdManageRoute
  '/votes/$voteId/': typeof VotesVoteIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/auth/login' | '/votes/$voteId/manage' | '/votes/$voteId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/auth/login' | '/votes/$voteId/manage' | '/votes/$voteId'
  id:
    | '__root__'
    | '/'
    | '/auth/login'
    | '/votes/$voteId/manage'
    | '/votes/$voteId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthLoginRoute: typeof AuthLoginRoute
  VotesVoteIdManageRoute: typeof VotesVoteIdManageRoute
  VotesVoteIdIndexRoute: typeof VotesVoteIdIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthLoginRoute: AuthLoginRoute,
  VotesVoteIdManageRoute: VotesVoteIdManageRoute,
  VotesVoteIdIndexRoute: VotesVoteIdIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/auth/login",
        "/votes/$voteId/manage",
        "/votes/$voteId/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/auth/login": {
      "filePath": "auth/login.tsx"
    },
    "/votes/$voteId/manage": {
      "filePath": "votes/$voteId/manage.tsx"
    },
    "/votes/$voteId/": {
      "filePath": "votes/$voteId/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */

/**
 * Generated by @openapi-codegen
 *
 * @version 0.1.0
 */
import * as reactQuery from '@tanstack/react-query';
import { usePollsterContext, PollsterContext } from './pollsterContext';
import type * as Fetcher from './pollsterFetcher';
import { pollsterFetch } from './pollsterFetcher';
import type * as Schemas from './pollsterSchemas';

export type TestError = Fetcher.ErrorWrapper<undefined>;

export type TestVariables = PollsterContext['fetcherOptions'];

export const fetchTest = (variables: TestVariables, signal?: AbortSignal) =>
    pollsterFetch<Schemas.TempModel, TestError, undefined, {}, {}, {}>({
        url: '/test',
        method: 'get',
        ...variables,
        signal,
    });

export const useTest = <TData = Schemas.TempModel>(
    variables: TestVariables,
    options?: Omit<
        reactQuery.UseQueryOptions<Schemas.TempModel, TestError, TData>,
        'queryKey' | 'queryFn' | 'initialData'
    >,
) => {
    const { fetcherOptions, queryOptions, queryKeyFn } = usePollsterContext(options);
    return reactQuery.useQuery<Schemas.TempModel, TestError, TData>({
        queryKey: queryKeyFn({ path: '/test', operationId: 'test', variables }),
        queryFn: ({ signal }) => fetchTest({ ...fetcherOptions, ...variables }, signal),
        ...options,
        ...queryOptions,
    });
};

export type QueryOperation = {
    path: '/test';
    operationId: 'test';
    variables: TestVariables;
};

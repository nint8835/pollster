/**
 * Generated by @openapi-codegen
 *
 * @version 0.1.0
 */
import * as reactQuery from '@tanstack/react-query';

import { PollsterContext, queryKeyFn, usePollsterContext } from './pollsterContext';
import type * as Fetcher from './pollsterFetcher';
import { pollsterFetch } from './pollsterFetcher';
import type * as Schemas from './pollsterSchemas';

export type GetCurrentUserError = Fetcher.ErrorWrapper<undefined>;

export type GetCurrentUserVariables = PollsterContext['fetcherOptions'];

/**
 * Retrieve the details of the current user.
 */
export const fetchGetCurrentUser = (variables: GetCurrentUserVariables, signal?: AbortSignal) =>
    pollsterFetch<Schemas.DiscordUser | null, GetCurrentUserError, undefined, {}, {}, {}>({
        url: '/auth/me',
        method: 'get',
        ...variables,
        signal,
    });

/**
 * Retrieve the details of the current user.
 */
export const getCurrentUserQuery = (
    variables: GetCurrentUserVariables,
): {
    queryKey: reactQuery.QueryKey;
    queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<Schemas.DiscordUser | null>;
} => ({
    queryKey: queryKeyFn({
        path: '/auth/me',
        operationId: 'getCurrentUser',
        variables,
    }),
    queryFn: ({ signal }: { signal?: AbortSignal }) => fetchGetCurrentUser(variables, signal),
});

/**
 * Retrieve the details of the current user.
 */
export const useSuspenseGetCurrentUser = <TData = Schemas.DiscordUser | null>(
    variables: GetCurrentUserVariables,
    options?: Omit<
        reactQuery.UseQueryOptions<Schemas.DiscordUser | null, GetCurrentUserError, TData>,
        'queryKey' | 'queryFn' | 'initialData'
    >,
) => {
    const { queryOptions } = usePollsterContext(options);
    return reactQuery.useSuspenseQuery<Schemas.DiscordUser | null, GetCurrentUserError, TData>({
        ...getCurrentUserQuery(variables),
        ...options,
        ...queryOptions,
    });
};

/**
 * Retrieve the details of the current user.
 */
export const useGetCurrentUser = <TData = Schemas.DiscordUser | null>(
    variables: GetCurrentUserVariables,
    options?: Omit<
        reactQuery.UseQueryOptions<Schemas.DiscordUser | null, GetCurrentUserError, TData>,
        'queryKey' | 'queryFn' | 'initialData'
    >,
) => {
    const { queryOptions } = usePollsterContext(options);
    return reactQuery.useQuery<Schemas.DiscordUser | null, GetCurrentUserError, TData>({
        ...getCurrentUserQuery(variables),
        ...options,
        ...queryOptions,
    });
};

export type ListPollsError = Fetcher.ErrorWrapper<{
    status: 401;
    payload: Schemas.ErrorResponse;
}>;

export type ListPollsResponse = Schemas.Poll[];

export type ListPollsVariables = PollsterContext['fetcherOptions'];

/**
 * List all polls.
 */
export const fetchListPolls = (variables: ListPollsVariables, signal?: AbortSignal) =>
    pollsterFetch<ListPollsResponse, ListPollsError, undefined, {}, {}, {}>({
        url: '/api/polls/',
        method: 'get',
        ...variables,
        signal,
    });

/**
 * List all polls.
 */
export const listPollsQuery = (
    variables: ListPollsVariables,
): {
    queryKey: reactQuery.QueryKey;
    queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<ListPollsResponse>;
} => ({
    queryKey: queryKeyFn({
        path: '/api/polls/',
        operationId: 'listPolls',
        variables,
    }),
    queryFn: ({ signal }: { signal?: AbortSignal }) => fetchListPolls(variables, signal),
});

/**
 * List all polls.
 */
export const useSuspenseListPolls = <TData = ListPollsResponse>(
    variables: ListPollsVariables,
    options?: Omit<
        reactQuery.UseQueryOptions<ListPollsResponse, ListPollsError, TData>,
        'queryKey' | 'queryFn' | 'initialData'
    >,
) => {
    const { queryOptions } = usePollsterContext(options);
    return reactQuery.useSuspenseQuery<ListPollsResponse, ListPollsError, TData>({
        ...listPollsQuery(variables),
        ...options,
        ...queryOptions,
    });
};

/**
 * List all polls.
 */
export const useListPolls = <TData = ListPollsResponse>(
    variables: ListPollsVariables,
    options?: Omit<
        reactQuery.UseQueryOptions<ListPollsResponse, ListPollsError, TData>,
        'queryKey' | 'queryFn' | 'initialData'
    >,
) => {
    const { queryOptions } = usePollsterContext(options);
    return reactQuery.useQuery<ListPollsResponse, ListPollsError, TData>({
        ...listPollsQuery(variables),
        ...options,
        ...queryOptions,
    });
};

export type CreatePollError = Fetcher.ErrorWrapper<
    | {
          status: 401;
          payload: Schemas.ErrorResponse;
      }
    | {
          status: 403;
          payload: Schemas.ErrorResponse;
      }
    | {
          status: 422;
          payload: Schemas.HTTPValidationError;
      }
>;

export type CreatePollVariables = {
    body: Schemas.CreatePoll;
} & PollsterContext['fetcherOptions'];

/**
 * Create a new poll.
 */
export const fetchCreatePoll = (variables: CreatePollVariables, signal?: AbortSignal) =>
    pollsterFetch<Schemas.Poll, CreatePollError, Schemas.CreatePoll, {}, {}, {}>({
        url: '/api/polls/',
        method: 'post',
        ...variables,
        signal,
    });

/**
 * Create a new poll.
 */
export const useCreatePoll = (
    options?: Omit<reactQuery.UseMutationOptions<Schemas.Poll, CreatePollError, CreatePollVariables>, 'mutationFn'>,
) => {
    const { fetcherOptions } = usePollsterContext();
    return reactQuery.useMutation<Schemas.Poll, CreatePollError, CreatePollVariables>({
        mutationFn: (variables: CreatePollVariables) => fetchCreatePoll({ ...fetcherOptions, ...variables }),
        ...options,
    });
};

export type GetPollPathParams = {
    pollId: string;
};

export type GetPollError = Fetcher.ErrorWrapper<
    | {
          status: 401;
          payload: Schemas.ErrorResponse;
      }
    | {
          status: 404;
          payload: Schemas.ErrorResponse;
      }
    | {
          status: 422;
          payload: Schemas.HTTPValidationError;
      }
>;

export type GetPollVariables = {
    pathParams: GetPollPathParams;
} & PollsterContext['fetcherOptions'];

/**
 * Retrieve a poll by ID.
 */
export const fetchGetPoll = (variables: GetPollVariables, signal?: AbortSignal) =>
    pollsterFetch<Schemas.Poll, GetPollError, undefined, {}, {}, GetPollPathParams>({
        url: '/api/polls/{pollId}',
        method: 'get',
        ...variables,
        signal,
    });

/**
 * Retrieve a poll by ID.
 */
export const getPollQuery = (
    variables: GetPollVariables,
): {
    queryKey: reactQuery.QueryKey;
    queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<Schemas.Poll>;
} => ({
    queryKey: queryKeyFn({
        path: '/api/polls/{pollId}',
        operationId: 'getPoll',
        variables,
    }),
    queryFn: ({ signal }: { signal?: AbortSignal }) => fetchGetPoll(variables, signal),
});

/**
 * Retrieve a poll by ID.
 */
export const useSuspenseGetPoll = <TData = Schemas.Poll>(
    variables: GetPollVariables,
    options?: Omit<
        reactQuery.UseQueryOptions<Schemas.Poll, GetPollError, TData>,
        'queryKey' | 'queryFn' | 'initialData'
    >,
) => {
    const { queryOptions } = usePollsterContext(options);
    return reactQuery.useSuspenseQuery<Schemas.Poll, GetPollError, TData>({
        ...getPollQuery(variables),
        ...options,
        ...queryOptions,
    });
};

/**
 * Retrieve a poll by ID.
 */
export const useGetPoll = <TData = Schemas.Poll>(
    variables: GetPollVariables,
    options?: Omit<
        reactQuery.UseQueryOptions<Schemas.Poll, GetPollError, TData>,
        'queryKey' | 'queryFn' | 'initialData'
    >,
) => {
    const { queryOptions } = usePollsterContext(options);
    return reactQuery.useQuery<Schemas.Poll, GetPollError, TData>({
        ...getPollQuery(variables),
        ...options,
        ...queryOptions,
    });
};

export type CreatePollOptionPathParams = {
    pollId: string;
};

export type CreatePollOptionError = Fetcher.ErrorWrapper<
    | {
          status: 401;
          payload: Schemas.ErrorResponse;
      }
    | {
          status: 403;
          payload: Schemas.ErrorResponse;
      }
    | {
          status: 404;
          payload: Schemas.ErrorResponse;
      }
    | {
          status: 422;
          payload: Schemas.HTTPValidationError;
      }
>;

export type CreatePollOptionVariables = {
    body: Schemas.CreatePollOption;
    pathParams: CreatePollOptionPathParams;
} & PollsterContext['fetcherOptions'];

/**
 * Create a new option for a poll.
 */
export const fetchCreatePollOption = (variables: CreatePollOptionVariables, signal?: AbortSignal) =>
    pollsterFetch<
        Schemas.PollOption,
        CreatePollOptionError,
        Schemas.CreatePollOption,
        {},
        {},
        CreatePollOptionPathParams
    >({
        url: '/api/polls/{pollId}/options',
        method: 'post',
        ...variables,
        signal,
    });

/**
 * Create a new option for a poll.
 */
export const useCreatePollOption = (
    options?: Omit<
        reactQuery.UseMutationOptions<Schemas.PollOption, CreatePollOptionError, CreatePollOptionVariables>,
        'mutationFn'
    >,
) => {
    const { fetcherOptions } = usePollsterContext();
    return reactQuery.useMutation<Schemas.PollOption, CreatePollOptionError, CreatePollOptionVariables>({
        mutationFn: (variables: CreatePollOptionVariables) =>
            fetchCreatePollOption({ ...fetcherOptions, ...variables }),
        ...options,
    });
};

export type EditPollOptionPathParams = {
    pollId: string;
    optionId: string;
};

export type EditPollOptionError = Fetcher.ErrorWrapper<
    | {
          status: 401;
          payload: Schemas.ErrorResponse;
      }
    | {
          status: 403;
          payload: Schemas.ErrorResponse;
      }
    | {
          status: 404;
          payload: Schemas.ErrorResponse;
      }
    | {
          status: 422;
          payload: Schemas.HTTPValidationError;
      }
>;

export type EditPollOptionVariables = {
    body: Schemas.EditPollOption;
    pathParams: EditPollOptionPathParams;
} & PollsterContext['fetcherOptions'];

/**
 * Edit an option for a poll.
 */
export const fetchEditPollOption = (variables: EditPollOptionVariables, signal?: AbortSignal) =>
    pollsterFetch<Schemas.PollOption, EditPollOptionError, Schemas.EditPollOption, {}, {}, EditPollOptionPathParams>({
        url: '/api/polls/{pollId}/options/{optionId}',
        method: 'patch',
        ...variables,
        signal,
    });

/**
 * Edit an option for a poll.
 */
export const useEditPollOption = (
    options?: Omit<
        reactQuery.UseMutationOptions<Schemas.PollOption, EditPollOptionError, EditPollOptionVariables>,
        'mutationFn'
    >,
) => {
    const { fetcherOptions } = usePollsterContext();
    return reactQuery.useMutation<Schemas.PollOption, EditPollOptionError, EditPollOptionVariables>({
        mutationFn: (variables: EditPollOptionVariables) => fetchEditPollOption({ ...fetcherOptions, ...variables }),
        ...options,
    });
};

export type DeletePollOptionPathParams = {
    pollId: string;
    optionId: string;
};

export type DeletePollOptionError = Fetcher.ErrorWrapper<
    | {
          status: 401;
          payload: Schemas.ErrorResponse;
      }
    | {
          status: 403;
          payload: Schemas.ErrorResponse;
      }
    | {
          status: 404;
          payload: Schemas.ErrorResponse;
      }
    | {
          status: 422;
          payload: Schemas.HTTPValidationError;
      }
>;

export type DeletePollOptionVariables = {
    pathParams: DeletePollOptionPathParams;
} & PollsterContext['fetcherOptions'];

/**
 * Delete an option for a poll.
 */
export const fetchDeletePollOption = (variables: DeletePollOptionVariables, signal?: AbortSignal) =>
    pollsterFetch<void, DeletePollOptionError, undefined, {}, {}, DeletePollOptionPathParams>({
        url: '/api/polls/{pollId}/options/{optionId}',
        method: 'delete',
        ...variables,
        signal,
    });

/**
 * Delete an option for a poll.
 */
export const useDeletePollOption = (
    options?: Omit<reactQuery.UseMutationOptions<void, DeletePollOptionError, DeletePollOptionVariables>, 'mutationFn'>,
) => {
    const { fetcherOptions } = usePollsterContext();
    return reactQuery.useMutation<void, DeletePollOptionError, DeletePollOptionVariables>({
        mutationFn: (variables: DeletePollOptionVariables) =>
            fetchDeletePollOption({ ...fetcherOptions, ...variables }),
        ...options,
    });
};

export type QueryOperation =
    | {
          path: '/auth/me';
          operationId: 'getCurrentUser';
          variables: GetCurrentUserVariables;
      }
    | {
          path: '/api/polls/';
          operationId: 'listPolls';
          variables: ListPollsVariables;
      }
    | {
          path: '/api/polls/{pollId}';
          operationId: 'getPoll';
          variables: GetPollVariables;
      };

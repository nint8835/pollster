/**
 * Generated by @openapi-codegen
 *
 * @version 0.1.0
 */
import * as reactQuery from '@tanstack/react-query';

import { PollsterContext, queryKeyFn } from './pollsterContext';
import type * as Fetcher from './pollsterFetcher';
import { pollsterFetch } from './pollsterFetcher';
import type * as Schemas from './pollsterSchemas';

export type GetCurrentUserError = Fetcher.ErrorWrapper<undefined>;

export type GetCurrentUserVariables = PollsterContext['fetcherOptions'];

/**
 * Retrieve the details of the current user.
 */
export const fetchGetCurrentUser = (variables: GetCurrentUserVariables, signal?: AbortSignal) =>
    pollsterFetch<Schemas.DiscordUser | null, GetCurrentUserError, undefined, {}, {}, {}>({
        url: '/auth/me',
        method: 'get',
        ...variables,
        signal,
    });

/**
 * Retrieve the details of the current user.
 */
export const getCurrentUserQuery = (
    variables: GetCurrentUserVariables,
): [reactQuery.QueryKey, ({ signal }: { signal?: AbortSignal }) => Promise<Schemas.DiscordUser | null>] => [
    queryKeyFn({
        path: '/auth/me',
        operationId: 'getCurrentUser',
        variables,
    }),
    async ({ signal }: { signal?: AbortSignal }) => fetchGetCurrentUser({ ...variables }, signal),
];

export type ListVotesError = Fetcher.ErrorWrapper<undefined>;

export type ListVotesResponse = Schemas.Vote[];

export type ListVotesVariables = PollsterContext['fetcherOptions'];

export const fetchListVotes = (variables: ListVotesVariables, signal?: AbortSignal) =>
    pollsterFetch<ListVotesResponse, ListVotesError, undefined, {}, {}, {}>({
        url: '/api/votes/',
        method: 'get',
        ...variables,
        signal,
    });

export const listVotesQuery = (
    variables: ListVotesVariables,
): [reactQuery.QueryKey, ({ signal }: { signal?: AbortSignal }) => Promise<ListVotesResponse>] => [
    queryKeyFn({
        path: '/api/votes/',
        operationId: 'listVotes',
        variables,
    }),
    async ({ signal }: { signal?: AbortSignal }) => fetchListVotes({ ...variables }, signal),
];

export type QueryOperation =
    | {
          path: '/auth/me';
          operationId: 'getCurrentUser';
          variables: GetCurrentUserVariables;
      }
    | {
          path: '/api/votes/';
          operationId: 'listVotes';
          variables: ListVotesVariables;
      };

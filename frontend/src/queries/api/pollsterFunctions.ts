/**
 * Generated by @openapi-codegen
 *
 * @version 0.1.0
 */
import * as reactQuery from '@tanstack/react-query';

import { PollsterContext, queryKeyFn } from './pollsterContext';
import type * as Fetcher from './pollsterFetcher';
import { pollsterFetch } from './pollsterFetcher';
import type * as Schemas from './pollsterSchemas';

export type GetCurrentUserError = Fetcher.ErrorWrapper<undefined>;

export type GetCurrentUserVariables = PollsterContext['fetcherOptions'];

/**
 * Retrieve the details of the current user.
 */
export const fetchGetCurrentUser = (variables: GetCurrentUserVariables, signal?: AbortSignal) =>
    pollsterFetch<Schemas.DiscordUser | null, GetCurrentUserError, undefined, {}, {}, {}>({
        url: '/auth/me',
        method: 'get',
        ...variables,
        signal,
    });

/**
 * Retrieve the details of the current user.
 */
export const getCurrentUserQuery = (
    variables: GetCurrentUserVariables,
): {
    queryKey: reactQuery.QueryKey;
    queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<Schemas.DiscordUser | null>;
} => ({
    queryKey: queryKeyFn({
        path: '/auth/me',
        operationId: 'getCurrentUser',
        variables,
    }),
    queryFn: ({ signal }: { signal?: AbortSignal }) => fetchGetCurrentUser(variables, signal),
});

export type ListPollsError = Fetcher.ErrorWrapper<{
    status: 401;
    payload: Schemas.ErrorResponse;
}>;

export type ListPollsResponse = Schemas.Poll[];

export type ListPollsVariables = PollsterContext['fetcherOptions'];

/**
 * List all polls.
 */
export const fetchListPolls = (variables: ListPollsVariables, signal?: AbortSignal) =>
    pollsterFetch<ListPollsResponse, ListPollsError, undefined, {}, {}, {}>({
        url: '/api/polls/',
        method: 'get',
        ...variables,
        signal,
    });

/**
 * List all polls.
 */
export const listPollsQuery = (
    variables: ListPollsVariables,
): {
    queryKey: reactQuery.QueryKey;
    queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<ListPollsResponse>;
} => ({
    queryKey: queryKeyFn({
        path: '/api/polls/',
        operationId: 'listPolls',
        variables,
    }),
    queryFn: ({ signal }: { signal?: AbortSignal }) => fetchListPolls(variables, signal),
});

export type GetPollPathParams = {
    pollId: string;
};

export type GetPollError = Fetcher.ErrorWrapper<
    | {
          status: 401;
          payload: Schemas.ErrorResponse;
      }
    | {
          status: 404;
          payload: Schemas.ErrorResponse;
      }
    | {
          status: 422;
          payload: Schemas.HTTPValidationError;
      }
>;

export type GetPollVariables = {
    pathParams: GetPollPathParams;
} & PollsterContext['fetcherOptions'];

/**
 * Retrieve a poll by ID.
 */
export const fetchGetPoll = (variables: GetPollVariables, signal?: AbortSignal) =>
    pollsterFetch<Schemas.Poll, GetPollError, undefined, {}, {}, GetPollPathParams>({
        url: '/api/polls/{pollId}',
        method: 'get',
        ...variables,
        signal,
    });

/**
 * Retrieve a poll by ID.
 */
export const getPollQuery = (
    variables: GetPollVariables,
): {
    queryKey: reactQuery.QueryKey;
    queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<Schemas.Poll>;
} => ({
    queryKey: queryKeyFn({
        path: '/api/polls/{pollId}',
        operationId: 'getPoll',
        variables,
    }),
    queryFn: ({ signal }: { signal?: AbortSignal }) => fetchGetPoll(variables, signal),
});

export type CanVotePathParams = {
    pollId: string;
};

export type CanVoteError = Fetcher.ErrorWrapper<
    | {
          status: 401;
          payload: Schemas.ErrorResponse;
      }
    | {
          status: 404;
          payload: Schemas.ErrorResponse;
      }
    | {
          status: 422;
          payload: Schemas.HTTPValidationError;
      }
>;

export type CanVoteVariables = {
    pathParams: CanVotePathParams;
} & PollsterContext['fetcherOptions'];

/**
 * Check whether the user can vote in a given poll.
 */
export const fetchCanVote = (variables: CanVoteVariables, signal?: AbortSignal) =>
    pollsterFetch<Schemas.CanVote, CanVoteError, undefined, {}, {}, CanVotePathParams>({
        url: '/api/polls/{pollId}/can-vote',
        method: 'get',
        ...variables,
        signal,
    });

/**
 * Check whether the user can vote in a given poll.
 */
export const canVoteQuery = (
    variables: CanVoteVariables,
): {
    queryKey: reactQuery.QueryKey;
    queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<Schemas.CanVote>;
} => ({
    queryKey: queryKeyFn({
        path: '/api/polls/{pollId}/can-vote',
        operationId: 'canVote',
        variables,
    }),
    queryFn: ({ signal }: { signal?: AbortSignal }) => fetchCanVote(variables, signal),
});

export type ListVotesPathParams = {
    pollId: string;
};

export type ListVotesError = Fetcher.ErrorWrapper<
    | {
          status: 401;
          payload: Schemas.ErrorResponse;
      }
    | {
          status: 403;
          payload: Schemas.ErrorResponse;
      }
    | {
          status: 404;
          payload: Schemas.ErrorResponse;
      }
    | {
          status: 422;
          payload: Schemas.HTTPValidationError;
      }
>;

export type ListVotesResponse = string[][];

export type ListVotesVariables = {
    pathParams: ListVotesPathParams;
} & PollsterContext['fetcherOptions'];

/**
 * List all votes for a poll.
 */
export const fetchListVotes = (variables: ListVotesVariables, signal?: AbortSignal) =>
    pollsterFetch<ListVotesResponse, ListVotesError, undefined, {}, {}, ListVotesPathParams>({
        url: '/api/polls/{pollId}/votes',
        method: 'get',
        ...variables,
        signal,
    });

/**
 * List all votes for a poll.
 */
export const listVotesQuery = (
    variables: ListVotesVariables,
): {
    queryKey: reactQuery.QueryKey;
    queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<ListVotesResponse>;
} => ({
    queryKey: queryKeyFn({
        path: '/api/polls/{pollId}/votes',
        operationId: 'listVotes',
        variables,
    }),
    queryFn: ({ signal }: { signal?: AbortSignal }) => fetchListVotes(variables, signal),
});

export type QueryOperation =
    | {
          path: '/auth/me';
          operationId: 'getCurrentUser';
          variables: GetCurrentUserVariables;
      }
    | {
          path: '/api/polls/';
          operationId: 'listPolls';
          variables: ListPollsVariables;
      }
    | {
          path: '/api/polls/{pollId}';
          operationId: 'getPoll';
          variables: GetPollVariables;
      }
    | {
          path: '/api/polls/{pollId}/can-vote';
          operationId: 'canVote';
          variables: CanVoteVariables;
      }
    | {
          path: '/api/polls/{pollId}/votes';
          operationId: 'listVotes';
          variables: ListVotesVariables;
      };

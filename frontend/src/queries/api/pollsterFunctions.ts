/**
 * Generated by @openapi-codegen
 *
 * @version 0.1.0
 */
import * as reactQuery from '@tanstack/react-query';

import { PollsterContext, queryKeyFn } from './pollsterContext';
import type * as Fetcher from './pollsterFetcher';
import { pollsterFetch } from './pollsterFetcher';
import type * as Schemas from './pollsterSchemas';

export type GetCurrentUserError = Fetcher.ErrorWrapper<undefined>;

export type GetCurrentUserVariables = PollsterContext['fetcherOptions'];

/**
 * Retrieve the details of the current user.
 */
export const fetchGetCurrentUser = (variables: GetCurrentUserVariables, signal?: AbortSignal) =>
    pollsterFetch<Schemas.DiscordUser | null, GetCurrentUserError, undefined, {}, {}, {}>({
        url: '/auth/me',
        method: 'get',
        ...variables,
        signal,
    });

/**
 * Retrieve the details of the current user.
 */
export const getCurrentUserQuery = (
    variables: GetCurrentUserVariables,
): {
    queryKey: reactQuery.QueryKey;
    queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<Schemas.DiscordUser | null>;
} => ({
    queryKey: queryKeyFn({
        path: '/auth/me',
        operationId: 'getCurrentUser',
        variables,
    }),
    queryFn: ({ signal }: { signal?: AbortSignal }) => fetchGetCurrentUser(variables, signal),
});

export type ListVotesError = Fetcher.ErrorWrapper<{
    status: 401;
    payload: Schemas.ErrorResponse;
}>;

export type ListVotesResponse = Schemas.Vote[];

export type ListVotesVariables = PollsterContext['fetcherOptions'];

/**
 * List all votes.
 */
export const fetchListVotes = (variables: ListVotesVariables, signal?: AbortSignal) =>
    pollsterFetch<ListVotesResponse, ListVotesError, undefined, {}, {}, {}>({
        url: '/api/votes/',
        method: 'get',
        ...variables,
        signal,
    });

/**
 * List all votes.
 */
export const listVotesQuery = (
    variables: ListVotesVariables,
): {
    queryKey: reactQuery.QueryKey;
    queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<ListVotesResponse>;
} => ({
    queryKey: queryKeyFn({
        path: '/api/votes/',
        operationId: 'listVotes',
        variables,
    }),
    queryFn: ({ signal }: { signal?: AbortSignal }) => fetchListVotes(variables, signal),
});

export type GetVotePathParams = {
    voteId: string;
};

export type GetVoteError = Fetcher.ErrorWrapper<
    | {
          status: 401;
          payload: Schemas.ErrorResponse;
      }
    | {
          status: 404;
          payload: Schemas.ErrorResponse;
      }
    | {
          status: 422;
          payload: Schemas.HTTPValidationError;
      }
>;

export type GetVoteVariables = {
    pathParams: GetVotePathParams;
} & PollsterContext['fetcherOptions'];

/**
 * Retrieve a vote by ID.
 */
export const fetchGetVote = (variables: GetVoteVariables, signal?: AbortSignal) =>
    pollsterFetch<Schemas.Vote, GetVoteError, undefined, {}, {}, GetVotePathParams>({
        url: '/api/votes/{voteId}',
        method: 'get',
        ...variables,
        signal,
    });

/**
 * Retrieve a vote by ID.
 */
export const getVoteQuery = (
    variables: GetVoteVariables,
): {
    queryKey: reactQuery.QueryKey;
    queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<Schemas.Vote>;
} => ({
    queryKey: queryKeyFn({
        path: '/api/votes/{voteId}',
        operationId: 'getVote',
        variables,
    }),
    queryFn: ({ signal }: { signal?: AbortSignal }) => fetchGetVote(variables, signal),
});

export type QueryOperation =
    | {
          path: '/auth/me';
          operationId: 'getCurrentUser';
          variables: GetCurrentUserVariables;
      }
    | {
          path: '/api/votes/';
          operationId: 'listVotes';
          variables: ListVotesVariables;
      }
    | {
          path: '/api/votes/{voteId}';
          operationId: 'getVote';
          variables: GetVoteVariables;
      };
